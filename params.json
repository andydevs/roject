{
  "name": "Roject",
  "tagline": "Roject is a programming project manager written in Ruby. With Roject, you can create and edit projects based on templates using simple commands without a heavy IDE.",
  "body": "# Roject\r\n\r\nRoject is a programming project manager written in Ruby. With Roject, you can create and edit projects based on templates and using simple, customisable commands without a heavy IDE.\r\n\r\n## Table of Contents\r\n\r\n - [Project Script](#project-script)\r\n \t- [Config](#config)\r\n \t- [Makers](#makers)\r\n - [The Command Line](#the-command-line)\r\n\r\n## Project Script\r\n\r\nA Roject project is configured using a project script in a project directory, create a ruby script called \"project.rb\". This ruby script is evaluated in the context of a Roject project object and contains information about the project, the types of files that can be made, and the tasks that can be performed.\r\n\r\n```ruby\r\n# Config\r\nconfig project_name: \"Dre\",\r\nauthor: \"Anshul Kharbanda\",\r\ncreated: \"7 - 23 - 2016\",\r\nshort_description: \"Forgot about Dre.\",\r\nlong_description: \"Nowadays everybody wanna talk like\" \\\r\n\" they got somethin' to say but nothin' comes out\" \\\r\n\" when they move their lips just a bunch of gibberish\" \\\r\n\" and they all acting like they forgot about Dre.\"\r\n\r\n#---------------------------MAKERS---------------------------\r\n\r\n# Header file\r\nfile :header, \r\npath: \"include/@(project_name)/@(path)\",\r\ntemplate: \"header.general\",\r\nextension: \"h\"\r\n\r\n# Source file\r\nfile :source, \r\npath: \"src/@(path)\",\r\ntemplate: \"source.general\",\r\nextension: \"cpp\"\r\n\r\n# Module includes a source and include\r\ntask :module do |args|\r\n\t# Add header id\r\n\targs[:header_id] = c_header_id(args[:path])\r\n\r\n\t# Create source and header\r\n\tmake :header, args\r\n\tmake :source, args\r\nend\r\n```\r\n\r\nIn this script, the project information (project_name, author, etc.) is configured using the `config` method, which is given a hash of the project info. After which, project makers (automated tasks that can be called via the command line) are defined using the `file` and `task` methods. The `file` method creates a file maker which makes files according to the information given using the command line arguments. The `task` method creates a task maker which executes the given block with the command line arguments.\r\n\r\n### Config\r\n\r\nProjects are configured using the `config` method:\r\n\r\n```ruby\r\nconfig project_name: \"Dre\",\r\nauthor: \"Anshul Kharbanda\",\r\ncreated: \"7 - 23 - 2016\",\r\nshort_description: \"Forgot about Dre.\",\r\nlong_description: \"Nowadays everybody wanna talk like\" \\\r\n\" they got somethin' to say but nothin' comes out\" \\\r\n\" when they move their lips just a bunch of gibberish\" \\\r\n\" and they all acting like they forgot about Dre.\"\r\n```\r\n\r\nThis command should be passed a hash of project info keys, of which are the following:\r\n\r\n|        Key        |            Description             |\r\n|:-----------------:|:----------------------------------:|\r\n|   project_name    |      the name of the project       |\r\n|      author       |       the project's author         |\r\n|      created      |  the date the project was created  |\r\n| short_description | a short description of the project |\r\n| long_description  | a long description of the project  |\r\n\r\nThere are also optional options to set. The `directory` key is a hash of essential directories. The `templates` key within the `directory` hash determines where project templates are located, and defaults to `_templates`. Of course, this can also be changed to your liking.\r\n\r\n```ruby\r\nconfig project_name: \"Dre\",\r\nauthor: \"Anshul Kharbanda\",\r\ncreated: \"7 - 23 - 2016\",\r\nshort_description: \"Forgot about Dre.\",\r\nlong_description: \"Nowadays everybody wanna talk like\" \\\r\n\" they got somethin' to say but nothin' comes out\" \\\r\n\" when they move their lips just a bunch of gibberish\" \\\r\n\" and they all acting like they forgot about Dre.\",\r\ndirectory: {\r\n\ttemplates: \"new-templates-dir\"\r\n}\r\n```\r\n\r\n### Makers\r\n\r\nProject makers are also specified int the Project script. Makers are automated tasks that create new files. There are two types of makers to date.\r\n\r\n#### File Makers\r\n\r\nFile makers are specified using the `file` method.\r\n\r\n```ruby\r\nfile :header, \r\npath: \"include/@(project_name)/@(path)\",\r\ntemplate: \"header.general\",\r\nextension: \"h\"\r\n```\r\n\r\nRoject uses the [General](http://andydevs.github.io/general) templating library for file and string templates. FileMakers use general templates, project information, and command line arguments to create files of specific types. File templates are located in the `templates` directory (which is set using `config`).\r\n\r\nThe `file` method is passed a name (used to call the maker via the command line arguments), and a hash of options, which should include the following:\r\n\r\n|    Key    |                                        Description                                      |\r\n|:---------:|:---------------------------------------------------------------------------------------:|\r\n|   path    |     The path of the file, as a General template string (parsed on creation of the file) |\r\n| template  |                     The filename of the General template file to format                 |\r\n| extension |                                     The file extension                                  |\r\n\r\n#### Task Makers\r\n\r\nTask makers are specified using the `task` method.\r\n\r\n```ruby\r\n# Module includes a source and include\r\ntask :module do |args|\r\n\t# Add header id\r\n\targs[:header_id] = c_header_id(args[:path])\r\n\r\n\t# Create source and header\r\n\tmake :header, args\r\n\tmake :source, args\r\nend\r\n```\r\n\r\nThe `task` method is passed the command line name and a block which is called when the task is called from the command line, which takes one hash of arguments parsed from the command line.\r\n\r\n## The Command Line\r\n\r\nThe Roject library comes with the `roject` binary script, from which you call the project makers that were defined.\r\n\r\n```\r\n$ roject [maker name] [command line arguments]\r\n```\r\n\r\nCommand line arguments are key-value pairs which follow the following pattern: `[key]:[value]`. The script will search the current directory for a project script, read it, and run the given maker in the context of the project.\r\n\r\n---\r\nAnshul Kharbanda",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}